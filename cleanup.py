"""
cleanup.py
Professional cleanup and organization script for TAP project.
"""

import os
import shutil
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def organize_project():
    """Organize project files into logical directories."""
    
    logger.info("🧹 ORGANIZING TAP PROJECT FILES")
    logger.info("=" * 50)
    
    # Create organization directories
    directories = {
        'outputs': 'Generated outputs and visualizations',
        'backup': 'Backup and legacy files',
        'examples': 'Example and demo files'
    }
    
    for dir_name, description in directories.items():
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            logger.info(f"✅ Created directory: {dir_name}/ - {description}")
    
    # File organization mapping
    file_moves = {
        # Generated outputs
        'classical_designs.json': 'outputs/',
        'classical_designs.svg': 'outputs/',
        'training_progress.png': 'outputs/',
        'quantum_demo.json': 'outputs/',
        'quantum_demo.svg': 'outputs/',
        'quantum_bezier_curves.svg': 'outputs/',
        'hybrid_quantum_classical_curves.svg': 'outputs/',
        'synthetic_train.npy': 'outputs/',
        
        # Backup files
        'main_backup.py': 'backup/',
        'main_redirect.py': 'backup/',
        'analyze_data.py': 'backup/',
        
        # Examples and demos
        'demo_quantum_gan.py': 'examples/',
        'quick_demo.py': 'examples/',
        'test_bezier_gan.py': 'examples/',
    }
    
    # Move files
    for file_name, target_dir in file_moves.items():
        if os.path.exists(file_name):
            try:
                target_path = os.path.join(target_dir, file_name)
                if os.path.exists(target_path):
                    logger.info(f"⚠️  Skipping {file_name} - already exists in {target_dir}")
                else:
                    shutil.move(file_name, target_path)
                    logger.info(f"📁 Moved {file_name} -> {target_dir}")
            except Exception as e:
                logger.error(f"❌ Error moving {file_name}: {e}")
    
    # Clean up cache
    cache_dirs = ['__pycache__', 'src/__pycache__']
    for cache_dir in cache_dirs:
        if os.path.exists(cache_dir):
            try:
                shutil.rmtree(cache_dir)
                logger.info(f"🗑️  Cleaned cache: {cache_dir}")
            except Exception as e:
                logger.error(f"❌ Error cleaning {cache_dir}: {e}")
    
    logger.info("\n🎉 PROJECT ORGANIZATION COMPLETED!")
    logger.info("=" * 50)
    logger.info("Project structure:")
    logger.info("  📁 outputs/ - Generated files and visualizations")
    logger.info("  📁 backup/ - Legacy and backup files")
    logger.info("  📁 examples/ - Demo and example scripts")
    logger.info("  📁 src/ - Core source code modules")
    logger.info("  📄 main.py - Primary entry point")
    logger.info("  📄 classical_gan.py - Professional GAN implementation")

def create_project_summary():
    """Create a professional project summary."""
    
    summary = """
# TAP Project - Professional Summary

## Core Files (Production Ready)
- `main.py` - Primary entry point with error handling
- `classical_gan.py` - Professional GAN implementation
- `test_setup.py` - System validation and diagnostics
- `requirements.txt` - Dependency specifications
- `README.md` - Comprehensive documentation

## Source Modules (`src/`)
- `bezier_utils.py` - Bézier curve utilities
- `gan.py` - Enhanced GAN architectures
- `quantum_generator.py` - Quantum circuit generators
- `utility.py` - General utility functions

## Generated Outputs (`outputs/`)
- SVG files - Vector graphics for CAD import
- JSON files - Structured geometric data
- PNG files - Training visualizations and plots
- NPY files - Serialized training data

## Examples and Demos (`examples/`)
- Quantum GAN demonstrations
- Quick testing scripts
- Legacy implementations

## Backup Files (`backup/`)
- Previous implementations
- Development iterations
- Experimental features

## Usage Commands
```bash
# Production training
python main.py

# Quick validation
python test_setup.py

# Direct GAN training
python classical_gan.py

# Quantum demonstrations
python examples/demo_quantum_gan.py
```

---
Generated by TAP cleanup system
"""
    
    with open('PROJECT_SUMMARY.md', 'w', encoding='utf-8') as f:
        f.write(summary.strip())
    
    logger.info("📄 Created PROJECT_SUMMARY.md")

if __name__ == "__main__":
    organize_project()
    create_project_summary()
    logger.info("\n🚀 TAP project is now professionally organized!")
